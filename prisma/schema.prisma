generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id         String     @id @default(cuid())
  title      String?
  content    String?
  conditionRating  Int?
  conditionInfo String?
  condition   String?
  published  Boolean?    @default(true)
  publishedOn DateTime?
  expiredOn DateTime?
  reservedUntil DateTime?
  authorId   String?
  price      Float?
  location   String?
  type      String?
  images     Image[]
  author     User?      @relation(fields: [authorId], references: [id])
  comments   Comment[]
  category Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  createdAt DateTime  @default(now()) @map("created_at")
  likes PostLikes[]

}

model PostLikes {
  id         String     @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  post Post @relation(fields: [postId], references: [id])
  postId String

}

model Image {
  id        String  @id @default(cuid())
  secureUrl String?
  orderIndex Int? 
  publicId  String  @unique
  post      Post?   @relation(fields: [postId], references: [id])
  postId    String?
}

model Comment {
  id       String  @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  content  String
  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?
  post     Post?   @relation(fields: [postId], references: [id])
  postId   String?
  parent_comment_id String?
  
}

model Category {
  id       String  @id @default(cuid())
  name     String
  parentId String?
  posts    Post[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  emailVerified DateTime? @map("email_verified")
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  locations Location[]
  comments Comment[]
  phone    String?
  socials  Social[]
  likes PostLikes[]
  

  @@map("users")
}

model Location {
  id  String @id @default(cuid())
  county String?
  municipality String?
  district String?
  specification String?
  link String?
  userId String?
  user User? @relation(fields: [userId], references: [id])


}

model Social {
  id   String  @id @default(cuid())
  name String?
  link String?
  user User?   @relation(fields: [userId], references: [id])

  userId String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Role {
  USER
  ADMIN
}
